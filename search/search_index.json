{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Social Design System (SDS) is an Elegant UI/UX library crafted specifically for building social like applications. This is an open source project that you can fork and make PR.</p>"},{"location":"#terms","title":"Terms","text":"<ul> <li><code>Basic widgets</code> means the widgets in material.dart.</li> <li><code>widget of visual component</code> is a widget that appears on the screen. For instance <code>TextButton</code> is a visual component since it appears on the screen while <code>GestureDetector</code> is not a visual component since it does not appear on the screen.</li> </ul>"},{"location":"#todo","title":"TODO","text":""},{"location":"#sample-ui-of-social-deisgn-system","title":"Sample UI of Social Deisgn System","text":"Comic Theme Sleek Theme Social Theme ComicListView x ComicListView.builder  x ComicListView.separated  x Buttons  x Settings  x TextField  x IconButton  x Floating Action Button  x Segmented Button  x SnackBar  x Alert Dialog  x Wave Carousel Entry Basic Carousel Entry Round Carousel Entry"},{"location":"#themes","title":"Themes","text":"<p>SDS provides the following themes:</p> <ul> <li>Sleek</li> <li>Comic</li> </ul>"},{"location":"#philosophy-of-social-design-system","title":"Philosophy of Social Design System","text":"<ul> <li> <p>Social design system designs the basic widgets by theme customization. This means, you don't need to learn anything. Just write your code and the design of your app will be updated.</p> </li> <li> <p>How to apply the social design system to your button?</p> </li> </ul> <p>Applying <code>ComicTheme</code> to your button.</p> <pre><code>Theme(\n    data: ComicTheme.of(context),\n    child: TextButton('Hello, World!'),\n)\n</code></pre> <p>Or you can apply the <code>ComicTheme</code> to all over your app like below.</p> <pre><code>Theme(\n    data: ComicTheme.of(context),\n    child: MaterialApp( ... )\n)\n</code></pre> <p>Then, not only the buttons but all the widgets will use <code>ComicTheme</code>.</p> <p>Also, there are some widgets that can be given a theme.</p> <pre><code>\n</code></pre> <p>Social design system provides UI design to the basic widgets with visual component and it also provides its own custom widget for non-visual component like <code>ComicListView</code>.</p> <ul> <li>You can apply your own custom color scheme just as the way how flutter goes. And the social design system will honor it while applying its design system.</li> </ul>"},{"location":"#common-patterns-of-sds","title":"Common patterns of SDS","text":"<ul> <li> <p>Social design system follows the theme system of the Flutter. This means, you can apply your own theme just the way you used to.</p> </li> <li> <p>There are exceptions that some of the basic widgets change its look.</p> <ul> <li>For instance, <code>ElevatedButton</code> has a shadow. But the shadow is removed with comic theme. And this is because the button in comic theme should look like a commic style. So the shadow is removed.</li> </ul> </li> <li> <p>Comic theme does not add thick border on <code>TextButton(TextButton.icon)</code> and <code>IconButton</code> because Text Button is meant to be without border. You may use <code>OutlinedButton</code>.</p> </li> </ul>"},{"location":"library/build_context_extension/","title":"BuildContext Extensions","text":"<ul> <li><code>isNarrow</code> is to know if the mobile screen is narrow like iPhone SE.</li> <li><code>isWide</code> is to know if the mobile screen is wide like table or iPad.</li> </ul>"},{"location":"theme/","title":"Overview","text":"<p>This is the theme overview</p>"},{"location":"theme/color_scheme/","title":"Color Scheme","text":"<p>Using Social Design System's theming does not touch, set, or modify the colors (most of the time). It will use the current color scheme based on the context.</p> <p>This code will use the color scheme based on the context:</p> <pre><code>Theme(\n    data: ComicTheme.of(context),\n    child: TextButton(\n        child: Text(\"test\"),\n        onPressed: (){},\n    )\n);\n</code></pre>"},{"location":"theme/color_scheme/#setting-the-color-scheme","title":"Setting the Color Scheme","text":"<p>To set the color scheme, must use <code>copyWith</code> to modify the colorScheme.</p> <pre><code>Theme(\n    data: ComicTheme.of(context).copyWith(\n                      colorScheme: const ColorScheme(\n                        brightness: Brightness.light,\n                        primary: Colors.blue,\n                        onPrimary: Colors.orange,\n                        secondary: Colors.pink,\n                        onSecondary: Colors.red,\n                        error: Colors.purple,\n                        onError: Colors.black,\n                        background: Colors.yellow,\n                        onBackground: Colors.indigo,\n                        surface: Colors.teal,\n                        onSurface: Colors.lime,\n                    ),\n                ),\n    child: TextButton(\n        child: Text(\"test\"),\n        onPressed: (){},\n    )\n)\n</code></pre> <p>Or, practically, to prevent repeating setting the colorscheme, we set it on the outermost scaffold like:</p> <pre><code>Theme(\n    data: ComicTheme.of(context).copyWith(\n                      colorScheme: const ColorScheme(\n                        brightness: Brightness.light,\n                        primary: Colors.blue,\n                        onPrimary: Colors.orange,\n                        secondary: Colors.pink,\n                        onSecondary: Colors.red,\n                        error: Colors.purple,\n                        onError: Colors.black,\n                        background: Colors.yellow,\n                        onBackground: Colors.indigo,\n                        surface: Colors.teal,\n                        onSurface: Colors.lime,\n                    ),\n                ),\n    child: Scaffold(\n        body: TextButton(\n            child: Text(\"test\"),\n            onPressed: (){},\n        ),\n    )\n)\n</code></pre> <p>It is also posible to do something like this way:</p> <pre><code>const colorScheme1 = ColorScheme(\n                        brightness: Brightness.light,\n                        primary: Colors.blue,\n                        onPrimary: Colors.orange,\n                        secondary: Colors.pink,\n                        onSecondary: Colors.red,\n                        error: Colors.purple,\n                        onError: Colors.black,\n                        background: Colors.yellow,\n                        onBackground: Colors.indigo,\n                        surface: Colors.teal,\n                        onSurface: Colors.lime,\n                    );\n// ... some codes\nTheme(\n    data: ComicTheme.of(context).copyWith( colorScheme: colorScheme1 ),\n    child: Scaffold(\n        body: TextButton(\n            child: Text(\"test\"),\n            onPressed: (){},\n        ),\n    )\n)\n</code></pre>"},{"location":"theme/comic/comic.button/","title":"Buttons","text":"<ul> <li>Comic theme does not add thick border on <code>TextButton(TextButton.icon)</code> and <code>IconButton</code> because Text Button is meant to be without border. You may use <code>OutlinedButton</code>.<ul> <li><code>IconButton</code> is used as in <code>BackButton</code> of the <code>AppBar</code> and it looks urgly when it has a border. Instead, it support <code>ComicIconButtonThemeData</code> to make it look as comic design.</li> <li>You may use <code>ComicTextButtonThemeData</code> to make the look of <code>TextButton</code> as comic design.</li> </ul> </li> </ul> <p>Example of <code>ComicTextButtonThemeData</code></p> <pre><code>Theme(\n  data: ComicTextButtonThemeData.of(context),\n  child: TextButton.icon(\n    onPressed: () {\n      debugPrint('Pressed');\n    },\n    icon: const Icon(Icons.add),\n    label: const Text('This is Lebel'),\n  ),\n),\n</code></pre> <p>Example of <code>ComicIconButtonThemeData</code></p> <pre><code>Theme(\n  data: ComicIconButtonThemeData.of(context),\n  child: IconButton(\n    onPressed: () {\n      debugPrint('Pressed');\n    },\n    icon: const Icon(Icons.favorite),\n  ),\n),\n</code></pre>"},{"location":"theme/comic/comic.card/","title":"Card","text":"<ul> <li>Comic theme does not give elevation for the <code>Card</code> widget</li> <li>by default the <code>Card</code> widget has elevation, with comic theme the elevation is removed. </li> <li>Comic theme does not give theme design for the <code>Card</code> widget variant <code>Card.filled()</code> since comic theme should be a comic like design, </li> <li>The Card widget and the Card.outline() variant share the same theme design, so you can use either one.</li> </ul>"},{"location":"theme/comic/comic.card/#card-widget","title":"Card Widget","text":"<pre><code>Theme(\n    data: ComicTheme.of(context),\n    child: const Card(\n        child: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Text(\n            'Card Comic Theme'),\n        ),\n    ),\n),\n</code></pre>"},{"location":"theme/comic/comic.card/#cardoutline","title":"Card.outline","text":"<pre><code> Theme(\n    data: ComicTheme.of(context),\n    child: const Card.outlined(\n        child: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Text(\n            'Card Outlined Comic Theme'),\n        ),\n    ),\n),\n</code></pre>"},{"location":"theme/comic/comic.list_tile/","title":"ListTile","text":"<p>There is a border outline of the ListTile of the comic theme. And we choose <code>BorderSide</code> widget to display the border and its theme color is <code>outline</code>. So, if you want to change the color of border, use the <code>outline</code> color scheme.</p>"},{"location":"theme/comic/comic.list_tile/#list-tile-widget","title":"List Tile Widget","text":""},{"location":"theme/comic/comic.list_view/","title":"ComicListView","text":"<p><code>ComicListView</code> is a list view with comic style theme. It provides <code>ComicListView</code>, <code>ComicListView.builder()</code>, <code>ComicListView.separated()</code>.</p> <p>The <code>ComicListView</code> supports full ListView widget with the comic style ui design.</p> <p></p> <pre><code>ComicListView(\n  shrinkWrap: true,\n  physics: const NeverScrollableScrollPhysics(),\n  padding: EdgeInsets.zero,\n  children: List.generate(\n    5,\n    (index) =&gt; ListTile(\n      title: Text('Item $index'),\n      subtitle: Text('Subtitle $index'),\n      leading: const Icon(Icons.ac_unit),\n      trailing: const Icon(Icons.arrow_forward_ios),\n      onTap: () {},\n    ),\n  ),\n),\n</code></pre> <p><code>ComicListView.builder()</code> support the most of <code>ListView.builder()</code> properties with opinionated comic style ui design.</p> <p></p> <pre><code>ComicListView.builder(\n  padding: EdgeInsets.zero,\n  shrinkWrap: true,\n  physics: const NeverScrollableScrollPhysics(),\n  itemCount: 5,\n  itemBuilder: (context, index) =&gt; ListTile(\n    title: Text('Item $index'),\n    subtitle: Text('Subtitle $index'),\n    leading: const Icon(Icons.ac_unit),\n    trailing: const Icon(Icons.arrow_forward_ios),\n    onTap: () {},\n  ),\n),\n</code></pre> <p><code>ComicListView.separated</code> supports the most of <code>ListView.separated</code> properties except that you cannot customize the <code>separatedBuilder</code> since it is opinionated for comic ui design.</p> <p></p> <pre><code>ComicListView.separated(\n  padding: EdgeInsets.zero,\n  shrinkWrap: true,\n  itemCount: 5,\n  itemBuilder: (context, index) =&gt; ListTile(\n    title: Text('Item $index'),\n    subtitle: Text('Subtitle $index'),\n    leading: const Icon(Icons.ac_unit),\n    trailing: const Icon(Icons.arrow_forward_ios),\n    onTap: () {},\n  ),\n),\n</code></pre>"},{"location":"theme/comic/comic/","title":"Comic Theme","text":"<p>Comic style theme design.</p> <p>Comic theme should have</p> <ul> <li>thick border</li> <li>rounded border</li> <li>no shadow</li> </ul>"},{"location":"theme/comic/comic/#common-patterns","title":"Common Patterns","text":"<ul> <li><code>ElevatedButton</code> has a shadow but the shadow is removed with comic theme. This is because the button in comic theme should look like a commic style.</li> </ul>"},{"location":"theme/comic/comic/#how-to-apply","title":"How to apply","text":"<p>You can use <code>ComicTheme</code> widget like below.</p> <pre><code>const ComicTheme(\n    child: ListTile(\n    title: Text('Item 2'),\n    subtitle: Text('Subtitle 2'),\n    leading: Icon(Icons.access_alarm),\n    trailing: Icon(Icons.arrow_forward_ios),\n    ),\n),\n</code></pre> <p>Or you can use <code>Theme</code> widget with <code>ComicThemeData</code>.</p> <pre><code>Theme(\n    data: ComicTheme.of(context),\n    child: const ListTile(\n        title: Text('Item 3'),\n        subtitle: Text('Subtitle 3'),\n        leading: Icon(Icons.access_time),\n        trailing: Icon(Icons.arrow_forward_ios),\n    ),\n),\n</code></pre>"},{"location":"theme/comic/comic.navigation_drawer/","title":"Navigation Drawer","text":""},{"location":"theme/sleek/sleek.card/","title":"Card","text":"<ul> <li>Sleek theme does not give elevation and border for the <code>Card</code> widget</li> <li>By default, the Card widget has elevation. With the Sleek theme, the elevation is removed, and additionally, the border is also removed.</li> <li>Sleek theme does not give theme design for the <code>Card</code> widget variant <code>Card.outline()</code>, since the Sleek design should be a smooth and clean design</li> </ul>"},{"location":"theme/sleek/sleek.card/#card-widget","title":"Card Widget","text":"<pre><code>Theme(\n    data: SleekTheme.of(context),\n    child: const Card(\n        child: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Text(\n            'Card Sleek Theme'),\n        ),\n    ),\n),\n</code></pre> <ul> <li>Using the <code>Card.filled</code> variant widget may differ from using the <code>Card</code> widget because, by default, they use different colors. The <code>Card</code> widget uses <code>surfaceContainerLow</code> with lighter tone , while the <code>Card.filled</code> variant widget uses <code>surfaceContainerHigh</code> with darker tone.</li> </ul>"},{"location":"theme/sleek/sleek.card/#cardoutline","title":"Card.outline","text":"<pre><code> Theme(\n    data: SleekTheme.of(context),\n    child: const Card.filled(\n        child: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Text(\n            'Card Filled Sleek Theme'),\n        ),\n    ),\n),\n</code></pre>"},{"location":"theme/sleek/sleek.input/","title":"Input","text":"<p>Sleek has theme for TextField and TextFormField</p>"},{"location":"theme/sleek/sleek.input/#text-field","title":"Text Field","text":"<p>To apply, apply the following code:</p> <pre><code>Theme(\n    data: SleekThemeData.of(context),\n    child: const TextField(\n        decoration: InputDecoration(\n            labelText: 'Sleek',\n        ),\n    ),\n),\n</code></pre> <pre><code>Theme(\n    data: SleekThemeData.of(context),\n    child: TextFormField(\n        decoration: const InputDecoration(\n            labelText: 'Sleek',\n        ),\n    ),\n),\n</code></pre>"},{"location":"theme/sleek/sleek.list_view/","title":"SleekListView","text":"<p><code>SleekListView</code> is a list view with sleek style theme. It provides <code>SleekListView</code>, <code>SleekListView.builder()</code>, <code>SleekListView.separated()</code>.</p> <p>The <code>SleekListView</code> supports full ListView widget with the sleek style ui design.</p> <p></p> <pre><code>SleekListView(\n  shrinkWrap: true,\n  physics: const NeverScrollableScrollPhysics(),\n  padding: EdgeInsets.zero,\n  children: List.generate(\n    5,\n    (index) =&gt; ListTile(\n      title: Text('Item $index'),\n      subtitle: Text('Subtitle $index'),\n      leading: const Icon(Icons.ac_unit),\n      trailing: const Icon(Icons.arrow_forward_ios),\n      onTap: () {},\n    ),\n  ),\n),\n</code></pre> <p><code>SleekListView.builder()</code> support the most of <code>ListView.builder()</code> properties with opinionated sleek style ui design.</p> <p></p> <pre><code>SleekListView.builder(\n  padding: EdgeInsets.zero,\n  shrinkWrap: true,\n  physics: const NeverScrollableScrollPhysics(),\n  itemCount: 5,\n  itemBuilder: (context, index) =&gt; ListTile(\n    title: Text('Item $index'),\n    subtitle: Text('Subtitle $index'),\n    leading: const Icon(Icons.ac_unit),\n    trailing: const Icon(Icons.arrow_forward_ios),\n    onTap: () {},\n  ),\n),\n</code></pre> <p><code>SleekListView.separated</code> supports the most of <code>ListView.separated</code> properties except that you cannot customize the <code>separatedBuilder</code> since it is opinionated for sleek ui design.</p> <p></p> <pre><code>SleekListView.separated(\n  padding: EdgeInsets.zero,\n  shrinkWrap: true,\n  itemCount: 5,\n  itemBuilder: (context, index) =&gt; ListTile(\n    title: Text('Item $index'),\n    subtitle: Text('Subtitle $index'),\n    leading: const Icon(Icons.ac_unit),\n    trailing: const Icon(Icons.arrow_forward_ios),\n    onTap: () {},\n  ),\n),\n</code></pre>"},{"location":"theme/sleek/sleek/","title":"Sleek theme","text":"<p>Sleek theme is a theme with smooth, plain, clean, straight-forward style.</p> <p>It should</p> <ul> <li>not have border.</li> <li>not have shadow.</li> <li>have light background</li> <li>follow the theme design system.</li> </ul> <p></p>"},{"location":"theme/sleek/sleek/#how-to-apply","title":"How to apply","text":"<p>You can use <code>SleekTheme</code> widget like below.</p> <pre><code>const SleekTheme(\n    child: ListTile(\n        title: Text('Item 2'),\n        subtitle: Text('Subtitle 2'),\n        leading: Icon(Icons.access_alarm),\n        trailing: Icon(Icons.arrow_forward_ios),\n    ),\n),\n</code></pre> <p>Or you can use <code>Theme</code> widget with <code>ComicThemeData</code>.</p> <pre><code>Theme(\n    data: SleekThemeData.of(context),\n    child: const ListTile(\n        title: Text('Item 3'),\n        subtitle: Text('Subtitle 3'),\n        leading: Icon(Icons.access_time),\n        trailing: Icon(Icons.arrow_forward_ios),\n    ),\n),\n</code></pre>"},{"location":"widgets/","title":"Overview","text":"<p>In this chpater, basic widgets from flutter are explained.</p>"},{"location":"widgets/app_bar/","title":"App Bar","text":"<p>Comic App Bar: </p> <p>For Comic App Bar, the <code>outline</code> color from colorScheme is used.</p>"},{"location":"widgets/app_bar/#how-to-apply","title":"How to apply","text":"<p>In a scaffold, the appBar property needs a PreferredSizeWidget. Therefore, we can not simply apply theme directly to the AppBar. The theme should be applied to the scaffold.</p> <pre><code>Theme(\n    data: ComicTheme.of(context),\n        child: Scaffold(\n        appBar: AppBar(\n            title: const Text(\"AppBar\"),\n        ),\n        body: Center(\n            child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                    const Text(\"Not much changed in Sleek Theme\"),\n                ],  \n            ),\n        ),\n    ),\n)\n</code></pre>"},{"location":"widgets/badge/","title":"Badge","text":"<p>There is nothing to learn. Just continue how flutter is usually coded.</p>"},{"location":"widgets/bottom_app_bar/","title":"Bottom App Bar","text":"<p>Nothing to learn more. Simply follow how Flutter is usually coded.</p>"},{"location":"widgets/card/","title":"Card","text":"<p>There is nothing to learn. Just continue your work.</p>"},{"location":"widgets/checkbox/","title":"Checkbox","text":"<p>There is nothing to learn. Just continue how flutter is usually coded.</p>"},{"location":"widgets/checkbox_list_tile/","title":"Checkbox List Tile","text":"<p>There is nothing to learn. Just continue how flutter is usually coded.</p>"},{"location":"widgets/dialog/","title":"Dialog","text":"<p>There's nothing much to learn on applying the theme for <code>Dialog</code>. Just continue how you usually do.</p> <p>Comic Alert Dialog</p> <p></p> <p>Sleek Alert Dialog</p> <p></p>"},{"location":"widgets/floating_action_button/","title":"Floating Action Button","text":"<p>Flutter is not using any color from the colorScheme as default value for border. For Floating Action Button, Social design uses <code>outline</code> from the colorScheme as color for the border.</p> <p>In coding, there is nothing to learn more. Simply apply the theme and continue the way Flutter is coded.</p>"},{"location":"widgets/icon_button/","title":"IconButton","text":"<ul> <li>SDS does not provides theme design directly to <code>IconButton</code> because it is used as <code>BackButton</code> in <code>AppBar</code> and we cannot make a clean design with it. Flutter allows to custom UI design only for icons not for icon button for this time.<ul> <li>So, SDS provides <code>[Theme]IconButton</code> like <code>ComicIconbutton</code> or <code>SleekIconButton</code>.</li> </ul> </li> </ul> <pre><code>ComicIconButton(\n    icon: const Icon(Icons.search),\n    onPressed: () {},\n),\n</code></pre>"},{"location":"widgets/navigation_bar/","title":"Navigation Bar","text":"<p>Comic design also gives navigation bar a style. However, currently, there is no top outline in the theming for Navigation Bar. By default there will be no top outline. To add an outline NavigationBar must be a child of a Container with a BoxDecoration that has Border at top (it will be shown in example code below).</p> <p>Comic Navigation Bar: </p> <p>Sleek design has the solid coloring for its background. SDS (Social Design System) used different color for navigation bar to look consistent.</p> <p>These are the colors used by the theme:</p> <ul> <li>backgroundColor: <code>primaryContainer</code>,</li> <li>indicatorColor: <code>onPrimary</code></li> <li>icon's color when selected: <code>primary</code>,</li> <li>icon's color when unselected: <code>onPrimaryContainer</code></li> <li>label's color when selected: <code>primary</code></li> <li>label's color when unselected: <code>onPrimaryContainer</code></li> </ul> <p>Sleek Navigation Bar: </p>"},{"location":"widgets/navigation_bar/#how-to-apply","title":"How to apply","text":"<p>Check this example code, simply the usual way to apply theme in Flutter.</p> <pre><code>Theme(\n    data: ComicTheme.of(context),\n    child: Scaffold(\n    // ... body\n    bottomNavigationBar: NavigationBarTheme(\n        data: ComicTheme.of(context).navigationBarTheme,\n            child: NavigationBar(\n                selectedIndex: index,\n                onDestinationSelected: (v) {\n                    setState(() {\n                        index = v;\n                    });\n                },\n                destinations: [\n                    const NavigationDestination(\n                        icon: Icon(Icons.car_rental),\n                        label: '\uc2e4\ubc84\uc2a4',\n                    ),\n                    const NavigationDestination(\n                        icon: Icon(Icons.person),\n                        label: '\ubaa8\uc784',\n                    ),\n                    const NavigationDestination(\n                        icon: Icon(Icons.post_add),\n                        label: '\uac8c\uc2dc\ud310',\n                    ),\n                    const NavigationDestination(\n                        icon: Icon(Icons.menu),\n                        label: '\uba54\ub274',\n                    ),\n                ],\n            ),\n        ),\n    ),\n)\n</code></pre> <p>For Comic Theme, To add the outline above the navigation bar. Check this example code. (This will be up to the developer).</p> <p></p> <pre><code>Theme(\n    data: ComicTheme.of(context),\n    child: Scaffold(\n    // ... body\n    bottomNavigationBar: NavigationBarTheme(\n        data: ComicTheme.of(context).navigationBarTheme,\n            child: Container(\n                decoration: BoxDecoration(\n                    border: Border(\n                    top: BorderSide(\n                        color: Theme.of(context).colorScheme.onBackground,\n                        width: 1.6,\n                    ),\n                ),\n            ),\n            child: NavigationBar(\n                selectedIndex: index,\n                onDestinationSelected: (v) {\n                    setState(() {\n                        index = v;\n                    });\n                },\n                destinations: \n                    [\n                        const NavigationDestination(\n                            icon: Icon(Icons.car_rental),\n                            label: '\uc2e4\ubc84\uc2a4',\n                        ),\n                        const NavigationDestination(\n                            icon: Icon(Icons.person),\n                            label: '\ubaa8\uc784',\n                        ),\n                        const NavigationDestination(\n                            icon: Icon(Icons.post_add),\n                            label: '\uac8c\uc2dc\ud310',\n                        ),\n                        const NavigationDestination(\n                            icon: Icon(Icons.menu),\n                            label: '\uba54\ub274',\n                        ),\n                    ],\n                ),\n            ),\n        ),\n    ),\n)\n</code></pre>"},{"location":"widgets/segmented_button/","title":"Segmented Button","text":""},{"location":"widgets/segmented_button/#segemented-button-in-sleek-theme","title":"Segemented Button in Sleek Theme","text":"<p>The idea of sleek design is solid, unbordered. Therefore, Social Design System (a.k.a. SDS) must remove the border. However, the default color for background it uses might be surface that does not follow/look like the sleek idea when we removed the border. That is why SDS gave color for selectedBackgroundColor, selectedForegroundColor, and backgroundColor.</p> <p>These are the colors used by the theme:</p> <ul> <li>selectedBackgroundColor: <code>primary</code>,</li> <li>selectedForegroundColor: <code>onPrimary</code>,</li> <li>backgroundColor: <code>primaryContainer</code></li> </ul>"},{"location":"widgets/segmented_button/#how-to-code","title":"How to code","text":"<p>There is not much to learn more in coding. Simply the code in the Flutter way.</p>"},{"location":"widgets/snackbar/","title":"SnackBar","text":"<p>SDS can not directly apply the <code>Theme</code> with the <code>SnackBar</code> unlike other widgets. It needs to wrap the <code>Scaffold</code> with the <code>Theme</code> widget to apply the themes successfully.</p>"},{"location":"widgets/snackbar/#displaying-snackbar","title":"Displaying Snackbar","text":"<pre><code>ElevatedButton(\n    onPressed: () =&gt; ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n                content: const Text('This is Comic SnackBar'),\n                action: SnackBarAction(\n                  onPressed: () {},\n                  label: 'Action',\n                ),\n            ),\n        ),\n    child: const Text('Display Comic SnackBar'),\n),\n</code></pre> <p>In flutter, this is the common way to display a snackbar. It needs to call the <code>showSnackBar()</code> from <code>ScaffoldMessenger</code> where it use the default color of <code>SnackBar</code> and being dependent on <code>Scaffold</code>. The code below is an example on how to work around with <code>SnackBar</code>.</p>"},{"location":"widgets/snackbar/#applying-theme-on-snackbar","title":"Applying theme on snackbar","text":"<p>To apply, for example, the <code>Comic Theme</code>, we can wrap the <code>Scaffold</code> widget with the <code>Theme</code> and provide the <code>ComicThemeData</code>.</p> <pre><code>@override\n  Widget build(BuildContext context) {\n    return Theme(\n      data: ComicTheme.of(context),\n      child: Scaffold(\n        appBar: AppBar(\n          title: const Text('Comic SnackBar'),\n        ),\n        body: Center(\n          child: ElevatedButton(\n            onPressed: () =&gt; ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(\n                content: const Text('This is Comic SnackBar'),\n                action: SnackBarAction(\n                  onPressed: () {},\n                  label: 'Action',\n                ),\n              ),\n            ),\n            child: const Text('Display Comic SnackBar'),\n          ),\n        ),\n      ),\n    );\n  }\n</code></pre>"},{"location":"widgets/snackbar/#colors-used-for-the-theme","title":"Colors used for the theme","text":"<p>Comic Theme - backgroundColor : <code>surfaceContainerHighest</code> - borderColor : <code>outline</code> - textColor : <code>onSurface</code> - actionTextColor : <code>primary</code></p> <p>Sleek Theme - backgroundColor : <code>primaryContainer</code> - textColor : <code>onPrimaryContainer</code> - actionTextColor : <code>primary</code></p>"},{"location":"widgets/snackbar/#snackbar-behaviors","title":"Snackbar Behaviors","text":"<p>SDS lets you customize the widgets however you want. Here are some example of how you can customize your own snackbar.</p>"},{"location":"widgets/snackbar/#snackbar-properties","title":"Snackbar Properties","text":"<p>Changing the snackbar behaviors depends on your needs.</p> <p>SnackBarBehavior.fixed lets the <code>SnackBar</code> into its default position and sizes.</p> <p></p> <pre><code>SnackBar(\n  content: const Text('This is Comic SnackBar'),\n  behavior: SnackBarBehavior.fixed,\n  action: SnackBarAction(\n      onPressed: () {},\n      label: 'Action',\n  ),\n),\n</code></pre> <p>SnackBarBehavior.floating makes the <code>SnackBar</code> have a floating effect.</p> <p></p> <pre><code>SnackBar(\n  content: const Text('This is Comic SnackBar'),\n  behavior: SnackBarBehavior.floating,\n  margin: const EdgeInsets.fromLTRB(40, 0, 40, 32),\n  action: SnackBarAction(\n    onPressed: () {},\n    label: 'Action',\n  ),\n),\n</code></pre>"},{"location":"widgets/tab_bar/","title":"Tab Bar","text":"<p>Comic Tab Bar: </p> <p>Sleek Tab Bar: </p> <p>For sleek Tab Bar, Social Design System (SDS) used a specific color from the color scheme to used in the indicator box.</p> <ul> <li>indicator's decoration's color: <code>primaryContainer</code></li> </ul>"},{"location":"widgets/tab_bar/#how-to-apply","title":"How to apply","text":"<p>Simply follow how Flutter is usually coded.</p>"},{"location":"widgets_by_social_design_system/","title":"Overview","text":"<p>In this chapter, custom widgets from social design system are introduced.</p>"},{"location":"widgets_by_social_design_system/settings/","title":"Settings","text":"<p>This widget displays a settings UI like below.</p> <p></p> <p>As you see below, you can freely customize the children widgets.</p> <pre><code>Settings(label: 'Settings', children: [\n  ListTile(\n    visualDensity: VisualDensity.compact,\n    title: const Text('Notifications'),\n    subtitle: const Text('Receive notifications'),\n    leading: const Icon(Icons.notifications_outlined),\n    trailing: const Icon(Icons.chevron_right_rounded),\n    onTap: () =&gt; debugPrint('Item 1'),\n  ),\n  ListTile(\n    visualDensity: VisualDensity.compact,\n    title: const Text('Favorites'),\n    subtitle: const Text('Want to know who likes you?'),\n    leading: const Icon(Icons.favorite_border_outlined),\n    trailing: const Icon(\n      Icons.arrow_right_rounded,\n      size: 32,\n    ),\n    onTap: () =&gt; debugPrint('Item 2'),\n  ),\n  ListTile(\n    title: const Text('Privacy Policy'),\n    leading: const Icon(Icons.shield_outlined),\n    trailing: const Icon(Icons.arrow_circle_right_outlined),\n    onTap: () =&gt; debugPrint('Item 3'),\n  ),\n]),\n</code></pre>"},{"location":"widgets_by_social_design_system/sleep_walker/","title":"Sleep Walker","text":"<ul> <li> <p>You can move around a widget in a stack. It is useful to give some decoration under the stack.</p> </li> <li> <p>The speed of the each move is set by the starting point of the <code>duration</code>. Meaning, the speed of the current position to next position is depends on the <code>duration</code> of the current position. So, the last <code>duration</code> is ignored.</p> </li> </ul> <pre><code>import 'package:flutter/material.dart';\nimport 'package:social_kit/social_kit.dart';\n\nclass SleepWalkerScreen extends StatefulWidget {\n  static const String routeName = '/SleepWalker';\n  const SleepWalkerScreen({super.key});\n\n  @override\n  State&lt;SleepWalkerScreen&gt; createState() =&gt; _SleepWalkerScreenState();\n}\n\nclass _SleepWalkerScreenState extends State&lt;SleepWalkerScreen&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('SleepWalker'),\n      ),\n      body: Stack(\n        children: [\n          const Text(\"SleepWalker\"),\n          SleepWalker(\n            alignments: const [\n              (\n                alignment: Alignment.topLeft,\n                duration: Duration(milliseconds: 2000),\n              ),\n              (\n                alignment: Alignment.topRight,\n                duration: Duration(milliseconds: 700),\n              ),\n              (\n                alignment: Alignment.bottomRight,\n                duration: Duration(milliseconds: 400),\n              ),\n              (\n                alignment: Alignment.bottomLeft,\n                duration: Duration(milliseconds: 300),\n              ),\n              (\n                alignment: Alignment(.7, .2),\n                duration: Duration(milliseconds: 200),\n              ),\n              (\n                alignment: Alignment(-1, -1),\n                duration: Duration(seconds: 1),\n              ),\n            ],\n            child: Container(\n              width: 200,\n              height: 200,\n              color: Colors.blue,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre> <ul> <li>Use case; You may add a background that moves in a screen. Add a child widget that has some blurred shapes and rotatation.</li> </ul>"},{"location":"widgets_by_social_design_system/carousel_entry/0-carouse_entry_overview/","title":"Carousel Entry Overview","text":"<p>This is caoursel overview.md</p>"},{"location":"widgets_by_social_design_system/carousel_entry/basic_carousel_entry/","title":"BasicCarouselEntry","text":"<p>Most of the options are similiar to <code>WaveCarouselEntry</code> except there is no <code>logo</code> in <code>BasicCarouselEntry</code>.</p>"},{"location":"widgets_by_social_design_system/carousel_entry/basic_carousel_entry/#basic-carousel-entry","title":"Basic Carousel Entry","text":"<p>Below is a complete example of <code>BasicCarouselEntry</code>.</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:silvers/defines/terms.dart';\nimport 'package:silvers/global.dart';\nimport 'package:silvers/screens/entry/phone_number_login.screen.dart';\nimport 'package:social_kit/social_kit.dart';\n\nclass EntryScreen extends StatelessWidget {\n  static const String routeName = '/Entry';\n  const EntryScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final subtitleStyle = Theme.of(context).textTheme.labelMedium!.copyWith(\n          color: Colors.grey.shade700,\n          fontWeight: FontWeight.w400,\n          height: 1.5,\n        );\n    return Scaffold(\n      body: BasicCarouselEntry(\n        autoSwipeInterval: 3000,\n        titleSpacing: 16,\n        bottomStroke: 2,\n        bottomStrokeColor: Colors.grey.shade300,\n        bottomGradient: const SizedBox.shrink(),\n        indicatorActiveColor: Colors.indigo,\n        indicatorColor: Colors.grey,\n        start: ElevatedButton(\n          onPressed: () async {\n            final re = await showGeneralDialog&lt;bool?&gt;(\n                context: context,\n                pageBuilder: (context, _, __) {\n                  return SafeArea(\n                    child: Padding(\n                      padding: const EdgeInsets.all(xl),\n                      child: Scaffold(\n                        body: Padding(\n                          padding: const EdgeInsets.all(lg),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text(\n                                '\uc2e4\ubc84\uc2a4 \uac00\uc785\uc57d\uad00',\n                                style: context.titleLarge,\n                              ),\n                              const Divider(\n                                height: 32,\n                              ),\n                              const Expanded(\n                                child: SingleChildScrollView(\n                                  child: Text(termsAndConditions),\n                                ),\n                              ),\n                              const Divider(),\n                              Row(\n                                children: [\n                                  TextButton(\n                                    onPressed: () =&gt; context.pop(false),\n                                    child: const Text('\ub2eb\uae30'),\n                                  ),\n                                  const Spacer(),\n                                  TextButton(\n                                    onPressed: () =&gt; context.pop(true),\n                                    child: const Text('\ub3d9\uc758\ud569\ub2c8\ub2e4.'),\n                                  ),\n                                ],\n                              )\n                            ],\n                          ),\n                        ),\n                      ),\n                    ),\n                  );\n                });\n            if (re == true &amp;&amp; context.mounted) {\n              showGeneralDialog(\n                context: context,\n                pageBuilder: ($, $$, $$$) =&gt; const PhoneNumberLoginScreen(),\n              );\n            }\n          },\n          child: const Text('     \uc2dc\uc791\ud558\uae30     '),\n        ),\n        items: [\n          (\n            title: Text(\n              \"\uc778\uc0dd\uc740 60\ubd80\ud130\uac00 \uc7ac\ubbf8\uc788\uc8e0\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"\uc990\uac81\uace0 \ud589\ubcf5\ud55c\\n\uc911\uc7a5\ub144\uce35 \uc628&amp;\uc624\ud504\ub77c\uc778 \ucee4\ubba4\ub2c8\ud2f0\",\n              style: subtitleStyle,\n              textAlign: TextAlign.center,\n            ),\n            image: Image.asset(\n              'assets/images/entry/0.webp',\n              fit: BoxFit.cover,\n              color: Colors.black.withOpacity(0.5),\n              colorBlendMode: BlendMode.dstOver,\n            ),\n          ),\n          (\n            title: Text(\n              \"\uc2dc\ub2c8\uc5b4 \ucee4\ubba4\ud2f0\ub2c8\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"\uc2dc\ub2c8\uc5b4 \uc18c\uc15c \ucee4\ubba4\ub2c8\ud2f0? \ub9d0\uc774 \uc880 \uc5b4\ub835\uc8e0\\n\uadf8\ub0e5 \uc778\uc5f0\uc744 \ub9cc\ub098\ub294 \uacf3\uc774\uc5d0\uc694.\",\n              style: subtitleStyle,\n              textAlign: TextAlign.center,\n            ),\n            image: Image.asset(\n              'assets/images/entry/1.webp',\n              fit: BoxFit.cover,\n            ),\n          ),\n          (\n            title: Text(\n              \"\uc740\ud1f4 \ud6c4 \uc790\uae30 \uac1c\ubc1c\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"\uc774\uc81c \uc2dc\uc791\uc785\ub2c8\ub2e4. \ucee4\ubba4\ub2c8\ud2f0\ub97c \ud1b5\ud574 \uc0c8\ub85c\uc6b4 \ucde8\ubbf8, \uacf5\ubd80, \uc778\uc5f0\uc744 \ub9cc\ub098\ubcf4\uc138\uc694.\",\n              style: subtitleStyle,\n              textAlign: TextAlign.center,\n            ),\n            image: Image.asset(\n              'assets/images/entry/2.webp',\n              fit: BoxFit.cover,\n            ),\n          ),\n          (\n            title: Text(\n              \"\ucc44\ud305\uc774 \uc544\ub2cc \uc2e4\uc81c \ub9cc\ub0a8\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"\uc778\uc0dd \uc9e7\uc8e0. \uc6b0\ub9ac\ub294 \uc9c4\uc9dc \ub9cc\ub0a9\ub2c8\ub2e4.\\n\ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c \uce5c\uad6c\uac00 \ub418\uace0 \uc9c1\uc811 \ub9cc\ub098 \uc990\uac81\uace0 \ud589\ubcf5\ud55c \uc778\uc5f0\uc744 \ub9cc\ub4dc\uc138\uc694.\",\n              style: subtitleStyle,\n              textAlign: TextAlign.center,\n            ),\n            image: Image.asset(\n              'assets/images/entry/3.webp',\n              fit: BoxFit.cover,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"widgets_by_social_design_system/carousel_entry/round_carousel_entry/","title":"RoundCarouselEntry","text":"<ul> <li> <p><code>startTitle</code> is a widget to display on top of the <code>start</code> button. You may display a copyright or guideline.</p> </li> <li> <p>Other options are similar to <code>WaveCarouselEntry</code> except there is no <code>logo</code> option.</p> </li> </ul>"},{"location":"widgets_by_social_design_system/carousel_entry/wave_carousel_entry/","title":"WaveCarouselEntry","text":"<ul> <li>This displays an entry style widget. It does not have a scaffold. Meaning you can add it in a screen if you want.</li> <li> <p>It is best fit on mobile size.</p> </li> <li> <p><code>logo</code> is a widget that is displayed at the center-left. You can put whatever widget there.</p> </li> <li> <p><code>background</code> is a widget to put as a background. Or the background will be the background color of the theme.</p> </li> <li> <p><code>bottomStroke</code> is the width of the bottom line at the bottom of photos. Ex: 5</p> </li> <li> <p><code>bottomStrokeColor</code> is the color of <code>bottomStroke</code>. Ex: Colors.blue</p> </li> <li> <p><code>start</code> is the button at the very bottom to display \"CONTINUE\" OR \"GET STARTED\".</p> </li> <li> <p><code>autoSwipleInterval</code> is the interval in ms to swipe next slide. It must be bigger than 100 to activate the auto swipe.</p> </li> <li> <p><code>items</code> is an array that has the title, subtitle and the photo to display in the carousel.</p> </li> <li> <p><code>titleSpacing</code> is the spacing between <code>title</code> and <code>subtitle</code>.</p> </li> <li> <p><code>bottomGradient</code> is a widget that displays a graide at the bottom of the photos. Since it is a widget, you can put whatever UI as the <code>bottomGraident</code>.</p> </li> <li> <p><code>indicatorColor</code> is the color of inactive pagination indicator.</p> </li> <li><code>indicatorActiveColor</code> is the color of active pagination indicator.</li> </ul>"},{"location":"widgets_by_social_design_system/carousel_entry/wave_carousel_entry/#combination-of-wavecarouselentry-and-sleepwalker","title":"Combination of WaveCarouselEntry and SleepWalker","text":"<ul> <li>You can give a decoration of SleepWalker to the background of WaveCarouselEntry.</li> </ul> <pre><code>import 'package:cached_network_image/cached_network_image.dart';\nimport 'package:flutter/material.dart';\nimport 'package:social_kit/social_kit.dart';\n\nclass EntryScreen extends StatefulWidget {\n  static const String routeName = '/Entry';\n  const EntryScreen({super.key});\n\n  @override\n  State&lt;EntryScreen&gt; createState() =&gt; _EntryScreenState();\n}\n\nclass _EntryScreenState extends State&lt;EntryScreen&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: WaveCarouselEntry(\n        autoSwipeInterval: 3000,\n        bottomStroke: 8,\n        bottomStrokeColor: Colors.grey,\n        titleSpacing: 16,\n        start: ElevatedButton(\n          onPressed: () {\n            Navigator.pop(context);\n          },\n          child: const Text('CONTINUE'),\n        ),\n        logo: Container(\n          width: 72,\n          height: 72,\n          decoration: const BoxDecoration(\n            shape: BoxShape.circle,\n            color: Color(0xFFffe1f1),\n          ),\n          child: ClipOval(\n            child: CachedNetworkImage(\n              imageUrl: 'https://picsum.photos/250/?image=400',\n              fit: BoxFit.cover,\n            ),\n          ),\n        ),\n        items: [\n          (\n            title: Text(\n              \"Casual Talk\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"Please join casual and enjoyable conversations with potential matches using our meeting app. Easily connect and chat.\",\n              style: Theme.of(context).textTheme.labelMedium!.copyWith(\n                    color: Colors.grey,\n                    fontWeight: FontWeight.w400,\n                  ),\n              textAlign: TextAlign.center,\n            ),\n            image: CachedNetworkImage(\n              imageUrl: 'https://picsum.photos/250?image=90',\n              fit: BoxFit.cover,\n            ),\n          ),\n          (\n            title: Text(\n              \"Extends Social Circle\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"Discover interesting individuals to connect with. Our meeting app makes it easy to broaden your horizons and meet diverse people.\",\n              style: Theme.of(context).textTheme.labelMedium!.copyWith(\n                    color: Colors.grey,\n                    fontWeight: FontWeight.w400,\n                  ),\n              textAlign: TextAlign.center,\n            ),\n            image: CachedNetworkImage(\n              imageUrl: 'https://picsum.photos/250?image=100',\n              fit: BoxFit.cover,\n            ),\n          ),\n          (\n            title: Text(\n              \"Discover New Connections\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"Our meeting app is designed to help you find new connections and expand your social circle. Join us and meet new people.\",\n              style: Theme.of(context).textTheme.labelMedium!.copyWith(\n                    color: Colors.grey,\n                    fontWeight: FontWeight.w400,\n                  ),\n              textAlign: TextAlign.center,\n            ),\n            image: CachedNetworkImage(\n              imageUrl: 'https://picsum.photos/250?image=110',\n              fit: BoxFit.cover,\n            ),\n          ),\n          (\n            title: Text(\n              \"Meaningful Connections\",\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            subtitle: Text(\n              \"Create meaningful connections through honest conversations. Our app fosters a friendly and welcoming environment for meeting potential partners.\",\n              style: Theme.of(context).textTheme.labelMedium!.copyWith(\n                    color: Colors.grey,\n                    fontWeight: FontWeight.w400,\n                  ),\n              textAlign: TextAlign.center,\n            ),\n            image: CachedNetworkImage(\n              imageUrl: 'https://picsum.photos/250?image=120',\n              fit: BoxFit.cover,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre> <ul> <li>Below is a background widget that you can use it with CarouselEntries. The <code>EntryBackground</code> widget uses SleepWalker to make animated background.</li> </ul> <pre><code>WaveCarouselEntry(\n  backgroundWidget: EntryBackground(),\n)\n</code></pre> <pre><code>import 'dart:math';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'package:social_design_system/social_design_system.dart';\n\nclass EntryBackground extends StatelessWidget {\n  const EntryBackground({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return SleepWalker(\n      alignments: const [\n        (\n          alignment: Alignment.centerLeft,\n          duration: Duration(milliseconds: 2000),\n        ),\n        (\n          alignment: Alignment(-.1, .35),\n          duration: Duration(milliseconds: 2000),\n        ),\n        (\n          alignment: Alignment(0, .39),\n          duration: Duration(milliseconds: 2000),\n        ),\n        (\n          alignment: Alignment(0.9, .2),\n          duration: Duration(milliseconds: 1500),\n        ),\n        (\n          alignment: Alignment(1, .3),\n          duration: Duration(milliseconds: 1500),\n        ),\n        (\n          alignment: Alignment(.8, .6),\n          duration: Duration(milliseconds: 1400),\n        ),\n        (\n          alignment: Alignment(.0, .85),\n          duration: Duration(milliseconds: 1400),\n        ),\n        (\n          alignment: Alignment(-.8, .5),\n          duration: Duration(milliseconds: 1300),\n        ),\n        (\n          alignment: Alignment(.7, .2),\n          duration: Duration(milliseconds: 1200),\n        ),\n        (\n          alignment: Alignment(.8, .1),\n          duration: Duration(milliseconds: 1200),\n        ),\n        (\n          alignment: Alignment(.7, .15),\n          duration: Duration(milliseconds: 1200),\n        ),\n        (\n          alignment: Alignment(-.1, .25),\n          duration: Duration(milliseconds: 1200),\n        ),\n        (\n          alignment: Alignment.centerLeft,\n          duration: Duration(seconds: 1),\n        ),\n      ],\n      repeat: true,\n      child: SizedBox(\n        width: 196,\n        height: 196,\n        child: Stack(\n          children: [\n            // Center, Red\n            Positioned(\n              top: 80,\n              left: 50,\n              child: Transform(\n                alignment: Alignment.topRight,\n                transform: Matrix4.rotationZ(pi / 12), // rotateZ(-pi / 12.0),\n                child: Container(\n                  width: 99.88,\n                  height: 99.88,\n                  decoration: ShapeDecoration(\n                    color: Colors.red.withAlpha(1),\n                    shape: const StarBorder.polygon(\n                      sides: 3,\n                      pointRounding: 0.5,\n                    ),\n                    shadows: [\n                      BoxShadow(\n                        color: Colors.red.shade900.withAlpha(71),\n                        blurRadius: 384.4,\n                        spreadRadius: 0.1,\n                      ),\n                    ],\n                  ),\n                ).animate().fade().scale().rotate().then().rotate(\n                      delay: .4.seconds,\n                      duration: 2300.seconds,\n                      begin: 100,\n                      end: 0,\n                    ),\n              ),\n            ),\n            //Top, Orange\n            Positioned(\n              top: 0,\n              left: 30,\n              child: Transform(\n                alignment: Alignment.topRight,\n                transform: Matrix4.rotationZ(-pi / 7), // rotateZ(-pi / 12.0),\n                child: Container(\n                  width: 99.88,\n                  height: 99.88,\n                  decoration: ShapeDecoration(\n                    color: Colors.orange.withAlpha(1),\n                    shape: const StarBorder.polygon(\n                      sides: 3,\n                      pointRounding: 0.5,\n                    ),\n                    shadows: [\n                      BoxShadow(\n                        color: Colors.orange.shade900.withAlpha(71),\n                        blurRadius: 384.4,\n                        spreadRadius: 0.1,\n                      ),\n                    ],\n                  ),\n                ).animate().fade().scale().rotate().then().rotate(\n                      delay: .4.seconds,\n                      duration: 6000.seconds,\n                      begin: 0,\n                      end: 100,\n                    ),\n              ),\n            ),\n\n            /// Bottom, Blue\n            Positioned(\n              top: 90,\n              left: 50,\n              child: Transform(\n                alignment: Alignment.topRight,\n                transform: Matrix4.rotationZ(-pi / 5), // rotateZ(-pi / 12.0),\n                child: Container(\n                  width: 99.88,\n                  height: 99.88,\n                  decoration: ShapeDecoration(\n                    color: Colors.blue.withAlpha(1),\n                    shape: const StarBorder.polygon(\n                      sides: 3,\n                      pointRounding: .9,\n                    ),\n                    shadows: [\n                      BoxShadow(\n                        color: Colors.blue.shade900.withAlpha(71),\n                        blurRadius: 384.4,\n                        spreadRadius: 12,\n                      ),\n                    ],\n                  ),\n                ).animate().fade().scale().rotate().then().rotate(\n                      delay: .4.seconds,\n                      duration: 1900.seconds,\n                      begin: 0,\n                      end: 100,\n                    ),\n              ),\n            ),\n          ],\n        ).animate().rotate().scale().then().rotate(\n              delay: .4.seconds,\n              duration: 1900.seconds,\n              begin: 100,\n              end: 0,\n            ),\n      ),\n    );\n  }\n}\n</code></pre>"}]}